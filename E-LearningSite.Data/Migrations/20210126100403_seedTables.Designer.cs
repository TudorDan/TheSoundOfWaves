// <auto-generated />
using System;
using E_LearningSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_LearningSite.Data.Migrations
{
    [DbContext(typeof(LearningContext))]
    [Migration("20210126100403_seedTables")]
    partial class seedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("E_LearningSite.Domain.Catalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Catalogues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Broncos Ist Grade",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Steelers IIIrd Grade",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cowboys 9th Grade",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pay for 1, you get 2",
                            Name = "Guessing Master of Science",
                            SchoolId = 1,
                            SubjectId = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "For advanced majors",
                            Name = "How to Watch Television",
                            SchoolId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "2nd edition",
                            Name = "Hacking Ethics",
                            SchoolId = 2,
                            SubjectId = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "42",
                            Name = "The Answer to Life, The Universe and Everything",
                            SchoolId = 2,
                            SubjectId = 5
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.CourseCatalogue", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CatalogueId");

                    b.HasIndex("CatalogueId");

                    b.ToTable("CourseCatalogue");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Link = "Palm Reading link 1",
                            Name = "Palm Reading doc 1"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Link = "Witchcraft link 2",
                            Name = "Witchcraft doc 2"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            Link = "Getting dressed link 1",
                            Name = "Getting dressed doc 1"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            Link = "The art of walking link 2",
                            Name = "The art of walking doc 2"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            Link = "kack link 1",
                            Name = "hack doc 1"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 3,
                            Link = "hacky link 2",
                            Name = "hacky doc 2"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 4,
                            Link = "Keep searching link 1",
                            Name = "Keep searching doc 1"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 4,
                            Link = " link 2",
                            Name = " doc 2"
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Mark")
                        .HasColumnType("real");

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("CourseId");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessRights")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Mentors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessRights = 0,
                            BirthDate = new DateTime(1960, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tyrone Shotgun",
                            Photo = "mentor11.jpg",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessRights = 0,
                            BirthDate = new DateTime(1970, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Johnny 3Fingers",
                            Photo = "mentor12.jpg",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 3,
                            AccessRights = 0,
                            BirthDate = new DateTime(1964, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eric Blood Axe",
                            Photo = "mentor21.jpg",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 4,
                            AccessRights = 0,
                            BirthDate = new DateTime(1970, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tommy Machine Gun",
                            Photo = "mentor22.jpg",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.MentorCatalogue", b =>
                {
                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int");

                    b.HasKey("MentorId", "CatalogueId");

                    b.HasIndex("CatalogueId");

                    b.ToTable("MentorCatalogue");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Principal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessRights")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("Principals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessRights = 2,
                            BirthDate = new DateTime(1950, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Miss Danger",
                            Photo = "principal1.jpg",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessRights = 2,
                            BirthDate = new DateTime(1967, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Don Guzman",
                            Photo = "principal2.jpg",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Weed Health Institute",
                            Photo = "school1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Universidad Técnica de Buenas Maneras y Pistoleros",
                            Photo = "school2.jpg"
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessRights")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CatalogueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessRights = 1,
                            BirthDate = new DateTime(1999, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sister Switchblades",
                            Photo = "student11.jpg",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 5,
                            AccessRights = 1,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jamal Gangsta LeeRoy",
                            Photo = "student12.jpg",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 9,
                            AccessRights = 1,
                            BirthDate = new DateTime(1989, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Donna Corason Intenso",
                            Photo = "student21.jpg",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 10,
                            AccessRights = 1,
                            BirthDate = new DateTime(2001, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Sleeping Student",
                            Photo = "student22.jpg",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HISTORY",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "IT",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "ASTRONOMY",
                            SchoolId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "IT",
                            SchoolId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "HISTORY",
                            SchoolId = 2
                        });
                });

            modelBuilder.Entity("E_LearningSite.Domain.Catalogue", b =>
                {
                    b.HasOne("E_LearningSite.Domain.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Course", b =>
                {
                    b.HasOne("E_LearningSite.Domain.School", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_LearningSite.Domain.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("E_LearningSite.Domain.CourseCatalogue", b =>
                {
                    b.HasOne("E_LearningSite.Domain.Catalogue", "Catalogue")
                        .WithMany("CourseCatalogues")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_LearningSite.Domain.Course", "Course")
                        .WithMany("CourseCatalogues")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Document", b =>
                {
                    b.HasOne("E_LearningSite.Domain.Course", "Course")
                        .WithMany("Documents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Grade", b =>
                {
                    b.HasOne("E_LearningSite.Domain.Catalogue", "Catalogue")
                        .WithMany("Grades")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_LearningSite.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_LearningSite.Domain.Mentor", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_LearningSite.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");

                    b.Navigation("Course");

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Mentor", b =>
                {
                    b.HasOne("E_LearningSite.Domain.School", "School")
                        .WithMany("Mentors")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("E_LearningSite.Domain.MentorCatalogue", b =>
                {
                    b.HasOne("E_LearningSite.Domain.Catalogue", "Catalogue")
                        .WithMany("MentorCatalogues")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_LearningSite.Domain.Mentor", "Mentor")
                        .WithMany("MentorCatalogues")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Principal", b =>
                {
                    b.HasOne("E_LearningSite.Domain.School", "School")
                        .WithOne("Principal")
                        .HasForeignKey("E_LearningSite.Domain.Principal", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Student", b =>
                {
                    b.HasOne("E_LearningSite.Domain.Catalogue", "Catalogue")
                        .WithMany("Students")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("E_LearningSite.Domain.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Catalogue");

                    b.Navigation("School");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Subject", b =>
                {
                    b.HasOne("E_LearningSite.Domain.School", "School")
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Catalogue", b =>
                {
                    b.Navigation("CourseCatalogues");

                    b.Navigation("Grades");

                    b.Navigation("MentorCatalogues");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Course", b =>
                {
                    b.Navigation("CourseCatalogues");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Mentor", b =>
                {
                    b.Navigation("MentorCatalogues");
                });

            modelBuilder.Entity("E_LearningSite.Domain.School", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Mentors");

                    b.Navigation("Principal")
                        .IsRequired();

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("E_LearningSite.Domain.Subject", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
